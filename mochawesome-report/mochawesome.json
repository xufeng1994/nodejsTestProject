{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2017-10-10T14:43:10.241Z",
    "end": "2017-10-10T14:43:43.786Z",
    "duration": 33545,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "hooks",
        "suites": [
          {
            "title": "cnode测试用例",
            "suites": [
              {
                "title": "用户注册操作",
                "suites": [],
                "tests": [
                  {
                    "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "fullTitle": "cnode测试用例 用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "timedOut": false,
                    "duration": 1928,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"654321\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //验证提示信息是否正确\n            return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e32dc360-83bf-48c7-bb91-af6185bd5674",
                    "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "email 格式不正确,提示 邮箱不合法。",
                    "fullTitle": "cnode测试用例 用户注册操作 email 格式不正确,提示 邮箱不合法。",
                    "timedOut": false,
                    "duration": 2344,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack163com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //邮箱不合法。\n            return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca4164c7-ea25-454e-8bd0-1a44c05b55af",
                    "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "用户名存在，提示用户名或邮箱已被使用。",
                    "fullTitle": "cnode测试用例 用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
                    "timedOut": false,
                    "duration": 1722,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //用户名或邮箱已被使用。\n            return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ac1923c-1899-43c3-a785-b117dcc316a2",
                    "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 60000,
                "file": "\\uiTest\\userTest\\multipe.js",
                "uuid": "89d12760-7e63-46c0-be17-5d08526ddb37",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "D:\\AutoTest\\MyProject\\nodejsTestProject\\uiTest\\userTest\\multipe.js",
                "passes": [
                  {
                    "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "fullTitle": "cnode测试用例 用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "timedOut": false,
                    "duration": 1928,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"654321\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //验证提示信息是否正确\n            return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e32dc360-83bf-48c7-bb91-af6185bd5674",
                    "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "email 格式不正确,提示 邮箱不合法。",
                    "fullTitle": "cnode测试用例 用户注册操作 email 格式不正确,提示 邮箱不合法。",
                    "timedOut": false,
                    "duration": 2344,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack163com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //邮箱不合法。\n            return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca4164c7-ea25-454e-8bd0-1a44c05b55af",
                    "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "用户名存在，提示用户名或邮箱已被使用。",
                    "fullTitle": "cnode测试用例 用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
                    "timedOut": false,
                    "duration": 1722,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //用户名或邮箱已被使用。\n            return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ac1923c-1899-43c3-a785-b117dcc316a2",
                    "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5994,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "注册窗口是否可以正常打开？",
                "fullTitle": "hooks cnode测试用例 注册窗口是否可以正常打开？",
                "timedOut": false,
                "duration": 24999,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "593f26ef-5fba-4f49-adc5-b118ac26118c",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "注册窗口UI显示正常",
                "fullTitle": "hooks cnode测试用例 注册窗口UI显示正常",
                "timedOut": false,
                "duration": 807,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "92944d47-e8f7-4fa0-bd8c-2d737d5e189b",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "\\uiTest\\userTest\\multipe.js",
            "uuid": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
            "beforeHooks": [
              {
                "title": "\"before all\" hook: before",
                "fullTitle": "hooks cnode测试用例 \"before all\" hook: before",
                "timedOut": false,
                "duration": 87,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            console.log(\"before\")\n            // web = new driver.Builder().forBrowser('chrome').setChromeOptions(new chrome.Options().headless()).build();\n            // return web.executeScript(function () {\n            //     return {\n            //         width: window.screen.availWidth,\n            //         height: window.screen.availHeight\n            //     }\n            // })\n            // await web.manage().window().setSize(\"1366\", \"768\")\n            web =new driver.Builder().forBrowser(\"chrome\").build()",
                "err": {},
                "isRoot": false,
                "uuid": "08e8f58b-7fda-4760-bb8d-abb5f77e1b61",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook: beforeEach",
                "fullTitle": "hooks cnode测试用例 \"before each\" hook: beforeEach",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "//await web.sleep(2000)\nconsole.log(\"beforeEach\")",
                "err": {},
                "isRoot": false,
                "uuid": "16cb9b79-6213-47a7-be27-30ddf8b4ddac",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook: after",
                "fullTitle": "hooks cnode测试用例 \"after all\" hook: after",
                "timedOut": false,
                "duration": 65,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            console.log(\"after\")\n            // 执行完成后关闭用例\n            return await web.quit()",
                "err": {},
                "isRoot": false,
                "uuid": "64b9ded4-29f2-45c6-b312-26eede62e13c",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook: afterEach",
                "fullTitle": "hooks cnode测试用例 \"after each\" hook: afterEach",
                "timedOut": false,
                "duration": 286,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            console.log(\"afterEach\")\n            //   截屏操作   存在问题  ：util 方法无法使用\n            await uiAction.saveScreenShots(web)",
                "err": {},
                "isRoot": false,
                "uuid": "9fc7877b-f0b2-4ee8-ab60-b43a80b50331",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "D:\\AutoTest\\MyProject\\nodejsTestProject\\uiTest\\userTest\\multipe.js",
            "passes": [
              {
                "title": "注册窗口是否可以正常打开？",
                "fullTitle": "hooks cnode测试用例 注册窗口是否可以正常打开？",
                "timedOut": false,
                "duration": 24999,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "593f26ef-5fba-4f49-adc5-b118ac26118c",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "注册窗口UI显示正常",
                "fullTitle": "hooks cnode测试用例 注册窗口UI显示正常",
                "timedOut": false,
                "duration": 807,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "92944d47-e8f7-4fa0-bd8c-2d737d5e189b",
                "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 25806,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 60000,
        "file": "\\uiTest\\userTest\\multipe.js",
        "uuid": "0acd2c0b-6cd8-4e91-a919-1dbfe34f7b0a",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "D:\\AutoTest\\MyProject\\nodejsTestProject\\uiTest\\userTest\\multipe.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "b67513e8-2674-460b-a11a-101594785b73",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "注册窗口是否可以正常打开？",
      "fullTitle": "cnode测试用例 注册窗口是否可以正常打开？",
      "timedOut": false,
      "duration": 24999,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "593f26ef-5fba-4f49-adc5-b118ac26118c",
      "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册窗口UI显示正常",
      "fullTitle": "cnode测试用例 注册窗口UI显示正常",
      "timedOut": false,
      "duration": 807,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "92944d47-e8f7-4fa0-bd8c-2d737d5e189b",
      "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "fullTitle": "用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "timedOut": false,
      "duration": 1928,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"654321\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //验证提示信息是否正确\n            return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
      "err": {},
      "isRoot": false,
      "uuid": "e32dc360-83bf-48c7-bb91-af6185bd5674",
      "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "email 格式不正确,提示 邮箱不合法。",
      "fullTitle": "用户注册操作 email 格式不正确,提示 邮箱不合法。",
      "timedOut": false,
      "duration": 2344,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack163com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //邮箱不合法。\n            return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
      "err": {},
      "isRoot": false,
      "uuid": "ca4164c7-ea25-454e-8bd0-1a44c05b55af",
      "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "用户名存在，提示用户名或邮箱已被使用。",
      "fullTitle": "用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
      "timedOut": false,
      "duration": 1722,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //用户名或邮箱已被使用。\n            return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
      "err": {},
      "isRoot": false,
      "uuid": "8ac1923c-1899-43c3-a785-b117dcc316a2",
      "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "注册窗口是否可以正常打开？",
      "fullTitle": "cnode测试用例 注册窗口是否可以正常打开？",
      "timedOut": false,
      "duration": 24999,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "593f26ef-5fba-4f49-adc5-b118ac26118c",
      "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册窗口UI显示正常",
      "fullTitle": "cnode测试用例 注册窗口UI显示正常",
      "timedOut": false,
      "duration": 807,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await web.get(app.baseUrl);\n        await web.findElement(registerPage.registerUrl).click();\n        // 验证页面中的元素是否存在\n        return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "92944d47-e8f7-4fa0-bd8c-2d737d5e189b",
      "parentUUID": "e9b2c0a6-97d1-4a75-a42c-2836413f56d2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "fullTitle": "用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "timedOut": false,
      "duration": 1928,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"654321\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //验证提示信息是否正确\n            return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
      "err": {},
      "isRoot": false,
      "uuid": "e32dc360-83bf-48c7-bb91-af6185bd5674",
      "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "email 格式不正确,提示 邮箱不合法。",
      "fullTitle": "用户注册操作 email 格式不正确,提示 邮箱不合法。",
      "timedOut": false,
      "duration": 2344,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack163com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //邮箱不合法。\n            return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
      "err": {},
      "isRoot": false,
      "uuid": "ca4164c7-ea25-454e-8bd0-1a44c05b55af",
      "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "用户名存在，提示用户名或邮箱已被使用。",
      "fullTitle": "用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
      "timedOut": false,
      "duration": 1722,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await uiAction.userRegister(web, \"imzack\", \"123456\", \"123456\", \"imzack@163.com\")\n            let errortip = await web.findElement(registerPage.errortip).getText();\n            //用户名或邮箱已被使用。\n            return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
      "err": {},
      "isRoot": false,
      "uuid": "8ac1923c-1899-43c3-a785-b117dcc316a2",
      "parentUUID": "89d12760-7e63-46c0-be17-5d08526ddb37",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}