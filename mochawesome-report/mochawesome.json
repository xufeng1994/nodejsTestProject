{
  "stats": {
    "suites": 3,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2017-10-11T15:40:24.269Z",
    "end": "2017-10-11T15:41:06.354Z",
    "duration": 42085,
    "testsRegistered": 11,
    "passPercent": 90.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "hooks",
        "suites": [
          {
            "title": "cnode测试用例",
            "suites": [
              {
                "title": "用户注册操作",
                "suites": [],
                "tests": [
                  {
                    "title": "直接点击登录按钮，提示 信息不完整",
                    "fullTitle": "cnode测试用例 用户注册操作 直接点击登录按钮，提示 信息不完整",
                    "timedOut": false,
                    "duration": 2582,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async \n                await uiAction.userRegister(web,\"\",\"\",\"\",\"\")",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4dfc7dda-3dea-468f-8aff-c36dd60b803c",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "fullTitle": "cnode测试用例 用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "timedOut": false,
                    "duration": 2103,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"qwerertye\", \"123456\", \"654321\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //验证提示信息是否正确\n                return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25cb7fc2-9a1b-40a7-92f3-8adb183bc2fd",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "email 格式不正确,提示 邮箱不合法。",
                    "fullTitle": "cnode测试用例 用户注册操作 email 格式不正确,提示 邮箱不合法。",
                    "timedOut": false,
                    "duration": 3071,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng1994\", \"123456\", \"123456\", \"qwerqe1234\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //邮箱不合法。\n                return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56a2bb82-3b27-4193-a1ca-0b43740670fe",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "用户名存在，提示用户名或邮箱已被使用。",
                    "fullTitle": "cnode测试用例 用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
                    "timedOut": false,
                    "duration": 1988,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13d5fa4f-bafb-40ce-8af5-d38d1d5152f9",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "邮箱已经被使用，提示用户名或邮箱已被使用。",
                    "fullTitle": "cnode测试用例 用户注册操作 邮箱已经被使用，提示用户名或邮箱已被使用。",
                    "timedOut": false,
                    "duration": 2225,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"914650562@qq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65653140-1b80-4a82-a6ff-846e66920474",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "注册成功后是否显示激活提示信息",
                    "fullTitle": "cnode测试用例 用户注册操作 注册成功后是否显示激活提示信息",
                    "timedOut": false,
                    "duration": 3644,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web, nowdate, \"123456\", \"123456\", nowdate + \"@qq.com\")\n                let successtip = await web.findElement(registerPage.successtip).getText();\n                //欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\n                let actualtip = \"欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\"\n                return assert.deepEqual(actualtip, successtip);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f3bf1e5-4421-468f-a0fa-046239613e73",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "注册成功后是否收到邮件",
                    "fullTitle": "cnode测试用例 用户注册操作 注册成功后是否收到邮件",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                //暂不支持 todo",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06b7ebcc-35a2-4dc0-b72f-38c3da5f9adc",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "使用未激活的账户登录",
                    "fullTitle": "cnode测试用例 用户注册操作 使用未激活的账户登录",
                    "timedOut": false,
                    "duration": 5903,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //此帐号还没有被激活，激活链接已发送到 1506689011794@163.com 邮箱，请查收。\n                let actualtip = `此帐号还没有被激活，激活链接已发送到 '${nowdate}'@163.com 邮箱，请查收。`\n                let errortip =  await web.findElement(loginPage.errortip).getText();\n                console.log(web.findElement(loginPage.errortip).getText())\n                return assert.ok(errortip.indexOf(actualtip) > 0)",
                    "err": {
                      "message": "AssertionError [ERR_ASSERTION]: false == true",
                      "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.<anonymous> (uiTest\\userTest\\multipe.js:121:31)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "022aa2a4-4ace-45e5-aeab-e3c9a05a093c",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "激活后能够正常登录",
                    "fullTitle": "cnode测试用例 用户注册操作 激活后能够正常登录",
                    "timedOut": false,
                    "duration": 8397,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                // todo new Promise() async\n                db.activeUser(nowdate);\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //验证登录成功后首页显示用户名\n                let assertUserName = await web.findElement(indexPage.username).getText();\n                return assert.equal(assertUserName,nowdate)",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65b6027d-0b42-4616-bb4b-6bf785cf4e03",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 60000,
                "file": "\\uiTest\\userTest\\multipe.js",
                "uuid": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "D:\\AutoTest\\MyProject\\nodejsTestProject\\uiTest\\userTest\\multipe.js",
                "passes": [
                  {
                    "title": "直接点击登录按钮，提示 信息不完整",
                    "fullTitle": "cnode测试用例 用户注册操作 直接点击登录按钮，提示 信息不完整",
                    "timedOut": false,
                    "duration": 2582,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async \n                await uiAction.userRegister(web,\"\",\"\",\"\",\"\")",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4dfc7dda-3dea-468f-8aff-c36dd60b803c",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "fullTitle": "cnode测试用例 用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
                    "timedOut": false,
                    "duration": 2103,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"qwerertye\", \"123456\", \"654321\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //验证提示信息是否正确\n                return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25cb7fc2-9a1b-40a7-92f3-8adb183bc2fd",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "email 格式不正确,提示 邮箱不合法。",
                    "fullTitle": "cnode测试用例 用户注册操作 email 格式不正确,提示 邮箱不合法。",
                    "timedOut": false,
                    "duration": 3071,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng1994\", \"123456\", \"123456\", \"qwerqe1234\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //邮箱不合法。\n                return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56a2bb82-3b27-4193-a1ca-0b43740670fe",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "用户名存在，提示用户名或邮箱已被使用。",
                    "fullTitle": "cnode测试用例 用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
                    "timedOut": false,
                    "duration": 1988,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13d5fa4f-bafb-40ce-8af5-d38d1d5152f9",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "邮箱已经被使用，提示用户名或邮箱已被使用。",
                    "fullTitle": "cnode测试用例 用户注册操作 邮箱已经被使用，提示用户名或邮箱已被使用。",
                    "timedOut": false,
                    "duration": 2225,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"914650562@qq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65653140-1b80-4a82-a6ff-846e66920474",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "注册成功后是否显示激活提示信息",
                    "fullTitle": "cnode测试用例 用户注册操作 注册成功后是否显示激活提示信息",
                    "timedOut": false,
                    "duration": 3644,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web, nowdate, \"123456\", \"123456\", nowdate + \"@qq.com\")\n                let successtip = await web.findElement(registerPage.successtip).getText();\n                //欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\n                let actualtip = \"欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\"\n                return assert.deepEqual(actualtip, successtip);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f3bf1e5-4421-468f-a0fa-046239613e73",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "注册成功后是否收到邮件",
                    "fullTitle": "cnode测试用例 用户注册操作 注册成功后是否收到邮件",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                //暂不支持 todo",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06b7ebcc-35a2-4dc0-b72f-38c3da5f9adc",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "激活后能够正常登录",
                    "fullTitle": "cnode测试用例 用户注册操作 激活后能够正常登录",
                    "timedOut": false,
                    "duration": 8397,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                // todo new Promise() async\n                db.activeUser(nowdate);\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //验证登录成功后首页显示用户名\n                let assertUserName = await web.findElement(indexPage.username).getText();\n                return assert.equal(assertUserName,nowdate)",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65b6027d-0b42-4616-bb4b-6bf785cf4e03",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [
                  {
                    "title": "使用未激活的账户登录",
                    "fullTitle": "cnode测试用例 用户注册操作 使用未激活的账户登录",
                    "timedOut": false,
                    "duration": 5903,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //此帐号还没有被激活，激活链接已发送到 1506689011794@163.com 邮箱，请查收。\n                let actualtip = `此帐号还没有被激活，激活链接已发送到 '${nowdate}'@163.com 邮箱，请查收。`\n                let errortip =  await web.findElement(loginPage.errortip).getText();\n                console.log(web.findElement(loginPage.errortip).getText())\n                return assert.ok(errortip.indexOf(actualtip) > 0)",
                    "err": {
                      "message": "AssertionError [ERR_ASSERTION]: false == true",
                      "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.<anonymous> (uiTest\\userTest\\multipe.js:121:31)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)",
                      "diff": "- false\n+ true\n"
                    },
                    "isRoot": false,
                    "uuid": "022aa2a4-4ace-45e5-aeab-e3c9a05a093c",
                    "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 9,
                "totalPasses": 8,
                "totalFailures": 1,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": true,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 29913,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "注册窗口是否可以正常打开？",
                "fullTitle": "hooks cnode测试用例 注册窗口是否可以正常打开？",
                "timedOut": false,
                "duration": 6675,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "5d2edd28-aeeb-4911-9e2c-af585275a8ae",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "注册窗口UI显示正常",
                "fullTitle": "hooks cnode测试用例 注册窗口UI显示正常",
                "timedOut": false,
                "duration": 1179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "cf5de626-0b14-4249-90b5-24779701e3b9",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 60000,
            "file": "\\uiTest\\userTest\\multipe.js",
            "uuid": "6f1f269f-83be-41b2-bee1-f1996c092b53",
            "beforeHooks": [
              {
                "title": "\"before all\" hook: before",
                "fullTitle": "hooks cnode测试用例 \"before all\" hook: before",
                "timedOut": false,
                "duration": 91,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            console.log(\"before\")\n            // web = new driver.Builder().forBrowser('chrome').setChromeOptions(new chrome.Options().headless()).build();\n            // return web.executeScript(function () {\n            //     return {\n            //         width: window.screen.availWidth,\n            //         height: window.screen.availHeight\n            //     }\n            // })\n            // await web.manage().window().setSize(\"1366\", \"768\")\n            web = new driver.Builder().forBrowser(\"chrome\").build()",
                "err": {},
                "isRoot": false,
                "uuid": "0399b3e0-9fa7-4c5a-bb5f-1ce07bbeda81",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook: beforeEach",
                "fullTitle": "hooks cnode测试用例 \"before each\" hook: beforeEach",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "//await web.sleep(2000)\nconsole.log(\"beforeEach\")",
                "err": {},
                "isRoot": false,
                "uuid": "d45079de-c9ec-4a49-8fc6-28566cc697fe",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook: after",
                "fullTitle": "hooks cnode测试用例 \"after all\" hook: after",
                "timedOut": false,
                "duration": 61,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            console.log(\"after\")\n            // 执行完成后关闭用例\n            return await web.quit()",
                "err": {},
                "isRoot": false,
                "uuid": "9139c03b-d94e-4e26-b990-7b85f399cb2f",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook: afterEach",
                "fullTitle": "hooks cnode测试用例 \"after each\" hook: afterEach",
                "timedOut": false,
                "duration": 253,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            console.log(\"afterEach\")\n            //   截屏操作   存在问题  ：util 方法无法使用\n            await uiAction.saveScreenShots(web)",
                "err": {},
                "isRoot": false,
                "uuid": "8e9e585c-2e7b-45ea-a2d5-d27ec6a3bf48",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "D:\\AutoTest\\MyProject\\nodejsTestProject\\uiTest\\userTest\\multipe.js",
            "passes": [
              {
                "title": "注册窗口是否可以正常打开？",
                "fullTitle": "hooks cnode测试用例 注册窗口是否可以正常打开？",
                "timedOut": false,
                "duration": 6675,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "5d2edd28-aeeb-4911-9e2c-af585275a8ae",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "注册窗口UI显示正常",
                "fullTitle": "hooks cnode测试用例 注册窗口UI显示正常",
                "timedOut": false,
                "duration": 1179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
                "err": {},
                "isRoot": false,
                "uuid": "cf5de626-0b14-4249-90b5-24779701e3b9",
                "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 7854,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 60000,
        "file": "\\uiTest\\userTest\\multipe.js",
        "uuid": "5f59757e-6782-4159-ba2d-23430ec5271a",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "D:\\AutoTest\\MyProject\\nodejsTestProject\\uiTest\\userTest\\multipe.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "c9f25821-04d5-4498-88bf-e8680d0109a5",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "注册窗口是否可以正常打开？",
      "fullTitle": "cnode测试用例 注册窗口是否可以正常打开？",
      "timedOut": false,
      "duration": 6675,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "5d2edd28-aeeb-4911-9e2c-af585275a8ae",
      "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册窗口UI显示正常",
      "fullTitle": "cnode测试用例 注册窗口UI显示正常",
      "timedOut": false,
      "duration": 1179,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "cf5de626-0b14-4249-90b5-24779701e3b9",
      "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "直接点击登录按钮，提示 信息不完整",
      "fullTitle": "用户注册操作 直接点击登录按钮，提示 信息不完整",
      "timedOut": false,
      "duration": 2582,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n                await uiAction.userRegister(web,\"\",\"\",\"\",\"\")",
      "err": {},
      "isRoot": false,
      "uuid": "4dfc7dda-3dea-468f-8aff-c36dd60b803c",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "fullTitle": "用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "timedOut": false,
      "duration": 2103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"qwerertye\", \"123456\", \"654321\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //验证提示信息是否正确\n                return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
      "err": {},
      "isRoot": false,
      "uuid": "25cb7fc2-9a1b-40a7-92f3-8adb183bc2fd",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "email 格式不正确,提示 邮箱不合法。",
      "fullTitle": "用户注册操作 email 格式不正确,提示 邮箱不合法。",
      "timedOut": false,
      "duration": 3071,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng1994\", \"123456\", \"123456\", \"qwerqe1234\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //邮箱不合法。\n                return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
      "err": {},
      "isRoot": false,
      "uuid": "56a2bb82-3b27-4193-a1ca-0b43740670fe",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "用户名存在，提示用户名或邮箱已被使用。",
      "fullTitle": "用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
      "timedOut": false,
      "duration": 1988,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
      "err": {},
      "isRoot": false,
      "uuid": "13d5fa4f-bafb-40ce-8af5-d38d1d5152f9",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "邮箱已经被使用，提示用户名或邮箱已被使用。",
      "fullTitle": "用户注册操作 邮箱已经被使用，提示用户名或邮箱已被使用。",
      "timedOut": false,
      "duration": 2225,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"914650562@qq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
      "err": {},
      "isRoot": false,
      "uuid": "65653140-1b80-4a82-a6ff-846e66920474",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册成功后是否显示激活提示信息",
      "fullTitle": "用户注册操作 注册成功后是否显示激活提示信息",
      "timedOut": false,
      "duration": 3644,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web, nowdate, \"123456\", \"123456\", nowdate + \"@qq.com\")\n                let successtip = await web.findElement(registerPage.successtip).getText();\n                //欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\n                let actualtip = \"欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\"\n                return assert.deepEqual(actualtip, successtip);",
      "err": {},
      "isRoot": false,
      "uuid": "8f3bf1e5-4421-468f-a0fa-046239613e73",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册成功后是否收到邮件",
      "fullTitle": "用户注册操作 注册成功后是否收到邮件",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                //暂不支持 todo",
      "err": {},
      "isRoot": false,
      "uuid": "06b7ebcc-35a2-4dc0-b72f-38c3da5f9adc",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "使用未激活的账户登录",
      "fullTitle": "用户注册操作 使用未激活的账户登录",
      "timedOut": false,
      "duration": 5903,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //此帐号还没有被激活，激活链接已发送到 1506689011794@163.com 邮箱，请查收。\n                let actualtip = `此帐号还没有被激活，激活链接已发送到 '${nowdate}'@163.com 邮箱，请查收。`\n                let errortip =  await web.findElement(loginPage.errortip).getText();\n                console.log(web.findElement(loginPage.errortip).getText())\n                return assert.ok(errortip.indexOf(actualtip) > 0)",
      "err": {
        "message": "AssertionError [ERR_ASSERTION]: false == true",
        "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.<anonymous> (uiTest\\userTest\\multipe.js:121:31)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "022aa2a4-4ace-45e5-aeab-e3c9a05a093c",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "激活后能够正常登录",
      "fullTitle": "用户注册操作 激活后能够正常登录",
      "timedOut": false,
      "duration": 8397,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                // todo new Promise() async\n                db.activeUser(nowdate);\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //验证登录成功后首页显示用户名\n                let assertUserName = await web.findElement(indexPage.username).getText();\n                return assert.equal(assertUserName,nowdate)",
      "err": {},
      "isRoot": false,
      "uuid": "65b6027d-0b42-4616-bb4b-6bf785cf4e03",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "注册窗口是否可以正常打开？",
      "fullTitle": "cnode测试用例 注册窗口是否可以正常打开？",
      "timedOut": false,
      "duration": 6675,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "5d2edd28-aeeb-4911-9e2c-af585275a8ae",
      "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册窗口UI显示正常",
      "fullTitle": "cnode测试用例 注册窗口UI显示正常",
      "timedOut": false,
      "duration": 1179,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await web.get(app.baseUrl);\n            await web.findElement(registerPage.registerUrl).click();\n            // 验证页面中的元素是否存在\n            return assert.ok(web.findElement({ css: \"#content > div > div.header > ul > li.active\" }));",
      "err": {},
      "isRoot": false,
      "uuid": "cf5de626-0b14-4249-90b5-24779701e3b9",
      "parentUUID": "6f1f269f-83be-41b2-bee1-f1996c092b53",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "直接点击登录按钮，提示 信息不完整",
      "fullTitle": "用户注册操作 直接点击登录按钮，提示 信息不完整",
      "timedOut": false,
      "duration": 2582,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n                await uiAction.userRegister(web,\"\",\"\",\"\",\"\")",
      "err": {},
      "isRoot": false,
      "uuid": "4dfc7dda-3dea-468f-8aff-c36dd60b803c",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "fullTitle": "用户注册操作 两次密码不一致 应该收到<两次密码输入不一致。>提示",
      "timedOut": false,
      "duration": 2103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"qwerertye\", \"123456\", \"654321\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //验证提示信息是否正确\n                return assert.deepEqual(\"×\\n两次密码输入不一致。\", errortip);",
      "err": {},
      "isRoot": false,
      "uuid": "25cb7fc2-9a1b-40a7-92f3-8adb183bc2fd",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "email 格式不正确,提示 邮箱不合法。",
      "fullTitle": "用户注册操作 email 格式不正确,提示 邮箱不合法。",
      "timedOut": false,
      "duration": 3071,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng1994\", \"123456\", \"123456\", \"qwerqe1234\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //邮箱不合法。\n                return assert.ok(errortip.indexOf(\"邮箱不合法。\") > -1);",
      "err": {},
      "isRoot": false,
      "uuid": "56a2bb82-3b27-4193-a1ca-0b43740670fe",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "用户名存在，提示用户名或邮箱已被使用。",
      "fullTitle": "用户注册操作 用户名存在，提示用户名或邮箱已被使用。",
      "timedOut": false,
      "duration": 1988,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"youupdate@qqq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
      "err": {},
      "isRoot": false,
      "uuid": "13d5fa4f-bafb-40ce-8af5-d38d1d5152f9",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "邮箱已经被使用，提示用户名或邮箱已被使用。",
      "fullTitle": "用户注册操作 邮箱已经被使用，提示用户名或邮箱已被使用。",
      "timedOut": false,
      "duration": 2225,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await uiAction.userRegister(web, \"xufeng\", \"123456\", \"123456\", \"914650562@qq.com\")\n                let errortip = await web.findElement(registerPage.errortip).getText();\n                //用户名或邮箱已被使用。\n                return assert.ok(errortip.indexOf(\"用户名或邮箱已被使用。\"));",
      "err": {},
      "isRoot": false,
      "uuid": "65653140-1b80-4a82-a6ff-846e66920474",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册成功后是否显示激活提示信息",
      "fullTitle": "用户注册操作 注册成功后是否显示激活提示信息",
      "timedOut": false,
      "duration": 3644,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web, nowdate, \"123456\", \"123456\", nowdate + \"@qq.com\")\n                let successtip = await web.findElement(registerPage.successtip).getText();\n                //欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\n                let actualtip = \"欢迎加入 Nodeclub！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。\"\n                return assert.deepEqual(actualtip, successtip);",
      "err": {},
      "isRoot": false,
      "uuid": "8f3bf1e5-4421-468f-a0fa-046239613e73",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "注册成功后是否收到邮件",
      "fullTitle": "用户注册操作 注册成功后是否收到邮件",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                //暂不支持 todo",
      "err": {},
      "isRoot": false,
      "uuid": "06b7ebcc-35a2-4dc0-b72f-38c3da5f9adc",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "激活后能够正常登录",
      "fullTitle": "用户注册操作 激活后能够正常登录",
      "timedOut": false,
      "duration": 8397,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                // todo new Promise() async\n                db.activeUser(nowdate);\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //验证登录成功后首页显示用户名\n                let assertUserName = await web.findElement(indexPage.username).getText();\n                return assert.equal(assertUserName,nowdate)",
      "err": {},
      "isRoot": false,
      "uuid": "65b6027d-0b42-4616-bb4b-6bf785cf4e03",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "使用未激活的账户登录",
      "fullTitle": "用户注册操作 使用未激活的账户登录",
      "timedOut": false,
      "duration": 5903,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async function () {\n                await web.get(app.baseUrl);\n                let nowdate = new Date().valueOf();\n                await uiAction.userRegister(web,nowdate,\"123456\",\"123456\",nowdate+\"@163.com\")\n                await uiAction.userLogin(web,nowdate,\"123456\");\n                //此帐号还没有被激活，激活链接已发送到 1506689011794@163.com 邮箱，请查收。\n                let actualtip = `此帐号还没有被激活，激活链接已发送到 '${nowdate}'@163.com 邮箱，请查收。`\n                let errortip =  await web.findElement(loginPage.errortip).getText();\n                console.log(web.findElement(loginPage.errortip).getText())\n                return assert.ok(errortip.indexOf(actualtip) > 0)",
      "err": {
        "message": "AssertionError [ERR_ASSERTION]: false == true",
        "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.<anonymous> (uiTest\\userTest\\multipe.js:121:31)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)",
        "diff": "- false\n+ true\n"
      },
      "isRoot": false,
      "uuid": "022aa2a4-4ace-45e5-aeab-e3c9a05a093c",
      "parentUUID": "3d261ea7-3456-4489-a6e5-912abfc29a55",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}